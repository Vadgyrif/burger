{#
/**
 * @file
 * Default theme implementation to display a Hero block with Youtube Video.
 *
 * Available variables:
 * - plugin_id: The ID of the block implementation.
 * - label: The configured label of the block if visible.
 * - configuration: A list of the block's configuration values.
 *   - label: The configured label for the block.
 *   - label_display: The display settings for the label.
 *   - provider: The module or other provider that provided this block plugin.
 *   - Block plugin specific settings will also be stored here.
 * - content: The content of this block.
 * - attributes: array of HTML attributes populated by modules, intended to
 *   be added to the main container tag of this template.
 *   - id: A valid HTML ID and guaranteed unique.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - block_content: Block Content entity instance.
 * - media: Media entity attached to the Block Content via field_media.
 * - media_type: Media entity bundle.
 * - media_url: Available for Media of bundle 'video_local' or 'remote_video' detected as Vimeo Video.
 * - youtube_id: Available for Media of bundle 'remote_video' detected as Youtube Video.
 *
 * @see template_preprocess_block()
 * @see template_preprocess_block__lb_hero()
 *
 * @ingroup themeable
 */
#}
<div class="hero_banner-video--youtube-player-wrapper d-block">
    <div id="hero_banner-video--youtube-player"></div>
</div>

<script>
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/player_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // 3. This function creates an <iframe> (and YouTube player)
  //    after the API code downloads.
  var player;
  function onYouTubePlayerAPIReady() {
    player = new YT.Player('hero_banner-video--youtube-player', {
      height: '890',
      width: '1920',
      videoId: '{{ youtube_id }}',
      playerVars: {
        'modestbranding': true,
        'controls': 0,
        'autohide': 1,
        'wmode': 'opaque',
        'showinfo': 0,
        'loop': 1,
        'rel': 0,
      },
      events: {
        'onReady': onPlayerReady
      }
    });

    var audioControls = document.getElementById('hero_banner--audio-controls');

    document.getElementById('hero_banner--btn-pause').onclick = function() {
      player.pauseVideo();
      audioControls.classList.remove("is-playing");
    };

    document.getElementById('hero_banner--btn-play').onclick = function() {
      player.playVideo();
      audioControls.classList.add("is-playing");
    };

    document.getElementById('hero_banner--btn-unmute').onclick = function() {
      player.unMute();
      audioControls.classList.remove("is-muted");
    };

    document.getElementById('hero_banner--btn-mute').onclick = function() {
      player.mute();
      audioControls.classList.add("is-muted");
    };
  }

  function onPlayerReady(event) {
    player.playVideo();
    player.mute();
  }
</script>
